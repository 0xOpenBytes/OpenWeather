//
//  OpenWeather template generated by OpenBytes on 27/03/2023.
//
// Created by Ahmed Shendy.
//  SearchLocationViewModelTests.swift
//

import XCTest
import Test
@testable import OpenWeather

final class SearchLocationViewModelTests: XCTestCase {

    func testEmptySearchText() async throws {
        let sut = SearchLocationViewModel(
            capabilities: .init(locationProviding: MockLocationProvider()),
            input: .init()
        )

        sut.input.searchText = ""

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty
        }

        XCTAssertEqual(sut.content.result.count, 0)
    }

    func testNonEmptySearchText_CamelcaseNewKeyword() async throws {
        let sut = SearchLocationViewModel(
            capabilities: .init(locationProviding: MockLocationProvider()),
            input: .init()
        )

        sut.input.searchText = "New"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.count == 2
        }

        XCTAssertEqual(sut.content.result.count, 2)
    }

    func testNonEmptySearchText_LowercasenewKeyword() async throws {
        let sut = SearchLocationViewModel(
            capabilities: .init(locationProviding: MockLocationProvider()),
            input: .init()
        )

        sut.input.searchText = "new"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty == false
        }

        XCTAssertEqual(sut.content.result.count, 2)
    }

    func testNonEmptySearchText_CamelcaseLonKeyword() async throws {
        let sut = SearchLocationViewModel(
            capabilities: .init(locationProviding: MockLocationProvider()),
            input: .init()
        )

        sut.input.searchText = "Lon"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty == false
        }

        XCTAssertEqual(sut.content.result.count, 1)
    }
}
