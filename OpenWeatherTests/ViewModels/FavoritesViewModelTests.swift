//
//  OpenWeather template generated by OpenBytes on 02/04/2023.
//
// Created by Ahmed Shendy.
//  FavoritesViewModelTests.swift
//

import Test
import XCTest
import CoreLocation
@testable import OpenWeather

final class FavoritesViewModelTests: XCTestCase {

    func testEmptyFavorites() async throws {
        let sut: FavoritesViewModel = .mock

        try await Waiter(sut).wait(for: \.value.content.summaries) { summaries in
            summaries.isEmpty
        }

        XCTAssertTrue(sut.content.summaries.isEmpty)
    }

    func testNonEmptyFavorites() async throws {
        let sut: FavoritesViewModel = makeMockViewModel(
            withFavorites: [.london, .newYork]
        )

        try await Waiter(sut).wait(for: \.value.content.summaries) { summaries in
            summaries.isEmpty == false
        }

        XCTAssertFalse(sut.content.summaries.isEmpty)
    }

    func testChangesInFavorites() async throws {
        var favorites: [DeviceLocation] = [.london, .newYork]

        let sut: FavoritesViewModel = makeMockViewModel(
            withFavorites: favorites
        )

        try await assertEqualSummaries(sut: sut, favorites: favorites)

        for _ in 0..<favorites.count {
            sut.removeFavoriteLocation(favorites.removeFirst())

            try await assertEqualSummaries(sut: sut, favorites: favorites)
        }
    }

    func testWeatherSummaryForFavorites() async throws {
        let summaries: [DeviceWeatherSummary] = [.newYork]

        let sut: FavoritesViewModel = makeMockViewModel(
            withFavorites: summaries.map { $0.location }
        )

        try await Waiter(sut).wait(for: \.value.content.summaries) { result in
            result.isEmpty == false
        }

        XCTAssertEqual(sut.content.summaries, summaries)
    }

    // MARK: - Helpers

    private func makeMockViewModel(
        withFavorites favorites: [DeviceLocation]
    ) -> FavoritesViewModel {
        return .init(
            capabilities: .init(
                locationProviding: MockLocationProvider(),
                weatherProviding: MockWeatherProvider(),
                databaseService: MockDatabaseService(
                    favorites: favorites.mapToData()
                )
            ),
            input: .init()
        )
    }

    private func assertEqualSummaries(
        sut: FavoritesViewModel, favorites: [DeviceLocation]
    ) async throws {
        try await Waiter(sut).wait(for: \.value.content.summaries) { summaries in
            return summaries.count == favorites.count
        }

        let summaries = sut.content.summaries
        for index in summaries.indices {
            XCTAssertEqual(
                summaries.map { $0.location }[index],
                favorites[index]
            )
        }
    }
}
