//
//  OpenWeather template generated by OpenBytes on 02/04/2023.
//
// Created by Ahmed Shendy.
//  HomeViewModelTests.swift
//

import XCTest
import Test
@testable import OpenWeather

final class HomeViewModelTests: XCTestCase {

    func testLondonLocationWeather() async throws {
        let sut: HomeViewModel = .mock

        sut.getWeather(for: .london)

        let locationName = "London"
        let temperature = "\(Mock.londonWeather.currentTemperature.abbreviated)"
        let symbolName = "\(Mock.londonWeather.symbolName)"
        let realFeel = "\(Mock.londonWeather.realFeel.abbreviated)"
        let uv = "\(Mock.londonWeather.uv)"
        let windSpeed = "\(Mock.londonWeather.wind.speed.abbreviated)"

        try await Waiter(sut).wait(for: \.value.content) { content in
            content.locationName == locationName
            && content.temperature == temperature
            && content.symbolName == symbolName
            && content.realFeel == realFeel
            && content.uv == uv
            && content.windSpeed == windSpeed
        }

        XCTAssertEqual(sut.content.locationName, "London")
        XCTAssertEqual(sut.content.temperature, temperature)
        XCTAssertEqual(sut.content.symbolName, symbolName)
        XCTAssertEqual(sut.content.realFeel, realFeel)
        XCTAssertEqual(sut.content.uv, uv)
        XCTAssertEqual(sut.content.windSpeed, windSpeed)
    }
}

//TODO: Put this in global file
private extension Measurement where UnitType : Dimension {
    var abbreviated: String {
        formatted(.measurement(width: .abbreviated, usage: .asProvided))
    }
}
