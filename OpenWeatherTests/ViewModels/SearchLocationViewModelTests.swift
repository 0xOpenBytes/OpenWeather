//
//  OpenWeather template generated by OpenBytes on 27/03/2023.
//
// Created by Ahmed Shendy.
//  SearchLocationViewModelTests.swift
//

import XCTest
import Test
@testable import OpenWeather

final class SearchLocationViewModelTests: XCTestCase {

    func testEmptySearchText() async throws {
        let sut: SearchLocationViewModel = .mock

        sut.input.searchText = ""

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty
        }

        XCTAssertEqual(sut.content.result.count, 0)
    }

    func testNonEmptySearchText_CamelcaseNewKeyword() async throws {
        let sut: SearchLocationViewModel = .mock

        sut.input.searchText = "New"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.count == 2
        }

        XCTAssertEqual(sut.content.result.count, 2)
    }

    func testNonEmptySearchText_LowercaseNewKeyword() async throws {
        let sut: SearchLocationViewModel = .mock

        sut.input.searchText = "New"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty == false
        }

        XCTAssertEqual(sut.content.result.count, 2)
    }

    func testNonEmptySearchText_CamelcaseLonKeyword() async throws {
        let sut: SearchLocationViewModel = .mock

        sut.input.searchText = "Lon"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty == false
        }

        XCTAssertEqual(sut.content.result.count, 1)
    }

    // TODO: @0xLeif is this enough test for toggleFavorite?
    func testToggleFavoriteForLocation() async throws {
        let sut: SearchLocationViewModel = .mock

        sut.input.searchText = "Lon"

        try await Waiter(sut).wait(for: \.value.content.result) { result in
            result.isEmpty == false
        }

        for location in sut.content.result {
            XCTAssertFalse(location.isFavorite)
        }

        for location in sut.content.result {
            sut.toggleFavorite(for: location)

            try await Waiter(sut).wait(for: \.value.content.result) { result in
                result
                    .first(where: { $0 == location })?
                    .isFavorite == true
            }
        }

        for location in sut.content.result {
            XCTAssertTrue(location.isFavorite)
        }
    }
}
