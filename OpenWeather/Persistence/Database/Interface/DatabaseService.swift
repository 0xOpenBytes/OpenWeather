//
//  OpenWeather template generated by OpenBytes on 30/04/2023.
//
// Created by Ahmed Shendy.
//  DatabaseService.swift
//

import Foundation
import Combine

enum DatabaseError: LocalizedError, Equatable {
    case invalidColumnCount(
        _ expected: [String], _ expectedCount: Int,
        _ actual: [String], _ actualCount: Int
    )

    case missingColumn(_ name: String)
    case invalidColumnType(_ name: String, _ type: Any.Type)

    // swiftlint:disable line_length
    var errorDescription: String? {
        switch self {
        case .invalidColumnCount(
            let expected, let expectedCount,
            let actual, let actualCount
        ):
            let expectedColumns = "\(expected.joined(separator: ","))"
            let actualColumns = "\(actual.joined(separator: ","))"
            return "\(#fileID): ColumnCountMismtach: Expected \(expectedCount) columns: \(expectedColumns), but returned \(actualCount) columns: '\(actualColumns)'."

        case .missingColumn(let name):
            return "\(#fileID): MissingColumn: '\(name)' column is missing."

        case .invalidColumnType(let name, let type):
            return "\(#fileID): InvalidColumnType: '\(name)' column should be of type '\(type)'"
        }
    }
    // swiftlint:enable line_length

    static func == (lhs: Self, rhs: Self) -> Bool {
        lhs.errorDescription == rhs.errorDescription
    }
}

protocol DatabaseService {
    func tableExists(_ name: String) async throws -> Bool
    func columns(in name: String) async throws -> [String]

    // Favorites Table
    func favoriteExists(_ location: DeviceLocation) async throws -> Bool
    func fetchOneFavorite(_ location: DeviceLocation) async throws -> DeviceLocation?
    func fetchAllFavorites() async throws -> [DeviceLocation]
    func fetchAllFavoritesPublisher() -> AnyPublisher<[DeviceLocation], Error>
    func fetchAllFavorites(matching locations: [DeviceLocation]) async throws -> [DeviceLocation]
    func fetchAllFavoritesPublisher(matching locations: [DeviceLocation]) -> AnyPublisher<[DeviceLocation], Error>
    func insertOneFavorite(_ location: DeviceLocation) async throws
    func deleteOneFavorite(_ location: DeviceLocation) async throws
}
