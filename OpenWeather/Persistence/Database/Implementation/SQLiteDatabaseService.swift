//
//  OpenWeather template generated by OpenBytes on 30/04/2023.
//
// Created by Ahmed Shendy.
//  SQLiteDatabaseService.swift
//

import Foundation
import GRDB
import os.log

struct SQLiteDatabaseService: DatabaseService {

    private let dbQueue: DatabaseQueue

    init(_ dbQueue: DatabaseQueue) throws {
        self.dbQueue = dbQueue

        try self.migrator.migrate(dbQueue)
    }

    static func empty() throws -> SQLiteDatabaseService {
        let dbQueue = try DatabaseQueue(
            configuration: SQLiteDatabaseService.makeConfiguration()
        )

        return try SQLiteDatabaseService(dbQueue)
    }

    func tableExists(_ name: String) async throws -> Bool {
        try await dbQueue.read { db in
            try db.tableExists(name)
        }
    }

    func columns(in name: String) async throws -> [String] {
        try await dbQueue.read { db in
            try db
                .columns(in: name)
                .map { $0.name }
        }
    }

    func favoriteExists(_ location: LocationData) async throws -> Bool {
        try await dbQueue.read { db in
            guard let count = try Int.fetchOne(
                db,
                sql: "SELECT COUNT(*) FROM favorites WHERE name=? and lat=? and long=?;",
                arguments: [location.name, location.lat, location.long]
            )
            else { return false }

            return count == 1
        }
    }

    func findFavoriteLocation(_ location: LocationData) async throws -> LocationData? {
        try await dbQueue.read { db in
            guard let row = try Row.fetchOne(
                db,
                sql: "SELECT name, lat, long FROM favorites WHERE name=? and lat=? and long=? LIMIT 1;",
                arguments: [location.name, location.lat, location.long]
            )
            else { return nil }

            guard
                let name = row["name"] as? String,
                let lat = row["lat"] as? Double,
                let long = row["long"] as? Double
            else { return nil }

            return LocationData(
                name: name,
                location: .init(latitude: lat, longitude: long)
            )
        }
    }

    func insertFavoriteLocation(_ location: LocationData) async throws {
        try await dbQueue.write { db in
            try db.execute(
                sql: "INSERT INTO favorites (name, lat, long) VALUES (?, ?, ?);",
                arguments: [location.name, location.lat, location.long]
            )
        }
    }

    func deleteFavoriteLocation(_ location: LocationData) async throws {
        try await dbQueue.write { db in
            try db.execute(
                sql: "DELETE FROM favorites WHERE name=? and lat=? and long=?",
                arguments: [location.name, location.lat, location.long]
            )
        }
    }
}

extension SQLiteDatabaseService {
    private static let sqlLogger = OSLog(subsystem: Bundle.main.bundleIdentifier!, category: "SQL")

    /// Returns a database configuration suited for `PlayerRepository`.
    ///
    /// SQL statements are logged if the `SQL_TRACE` environment variable
    /// is set.
    ///
    /// - parameter base: A base configuration.
    public static func makeConfiguration(_ base: Configuration = Configuration()) -> Configuration {
        var config = base

        // An opportunity to add required custom SQL functions or
        // collations, if needed:
        // config.prepareDatabase { db in
        //     db.add(function: ...)
        // }

        // Log SQL statements if the `SQL_TRACE` environment variable is set.
        // See <https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/database/trace(options:_:)>
        if ProcessInfo.processInfo.environment["SQL_TRACE"] != nil {
            config.prepareDatabase { db in
                db.trace {
                    // It's ok to log statements publicly. Sensitive
                    // information (statement arguments) are not logged
                    // unless config.publicStatementArguments is set
                    // (see below).
                    os_log("%{public}@", log: sqlLogger, type: .debug, String(describing: $0))
                }
            }
        }

#if DEBUG
        // Protect sensitive information by enabling verbose debugging in
        // DEBUG builds only.
        // See <https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/configuration/publicstatementarguments>
        config.publicStatementArguments = true
#endif

        return config
    }
}

extension SQLiteDatabaseService {
    /// The DatabaseMigrator that defines the database schema.
    ///
    /// See <https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/migrations>
    private var migrator: DatabaseMigrator {
        var migrator = DatabaseMigrator()

#if DEBUG
        // Speed up development by nuking the database when migrations change
        // See <https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/migrations>
        migrator.eraseDatabaseOnSchemaChange = true
#endif

        migrator.registerMigration("createFavorites") { db in
            // Create a table
            // See <https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseschema>
            try db.create(table: "favorites") { t in
                t.autoIncrementedPrimaryKey("id")
                t.column("name", .text).notNull()
                t.column("lat", .double).notNull()
                t.column("long", .double).notNull()
            }
        }

        // Migrations for future application versions will be inserted here:
        // migrator.registerMigration(...) { db in
        //     ...
        // }

        return migrator
    }
}
