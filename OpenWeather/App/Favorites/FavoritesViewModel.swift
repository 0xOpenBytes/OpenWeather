//
//  OpenWeather template generated by OpenBytes on 16/03/2023.
//
// Created by Ahmed Shendy.
//  FavoritesViewModel.swift
//

import Foundation
import ViewModel
import CoreLocation

final class FavoritesViewModel: ViewModel<
    FavoritesViewModel.Capabilities,
    FavoritesViewModel.Input,
    FavoritesViewModel.Content
> {
    struct Capabilities {
        static var mock: Capabilities {
            .init(
                locationProviding: MockLocationProvider(),
                weatherProviding: MockWeatherProvider()
            )
        }

        private var weatherProviding: WeatherProviding
        private var locationProviding: LocationProviding

        init(locationProviding: LocationProviding, weatherProviding: WeatherProviding) {
            self.locationProviding = locationProviding
            self.weatherProviding = weatherProviding
        }

        func locationName(for location: CLLocation) async throws -> String {
            try await locationProviding.locationName(for: location)
        }

        func weather(for location: CLLocation) async throws -> DeviceWeather {
            try await weatherProviding.weather(for: location)
        }
    }

    struct Input { }

    struct Content {
        let favorites: [DeviceWeatherSummary]
    }

    override var content: Content {
        Content(favorites: favorites)
    }

    static var mock: FavoritesViewModel {
        .init(capabilities: .mock, input: .init())
    }

    private let errorHandler: ErrorHandler
    private var task: Task<Void, Never>?

    @Published private var favorites: [DeviceWeatherSummary] = []

    init(
        errorHandler: ErrorHandler = ErrorHandler(
            plugins: [ToastErrorPlugin()]
        ),
        capabilities: Capabilities,
        input: Input
    ) {
        self.errorHandler = errorHandler

        super.init(capabilities: capabilities, input: input)
    }

    func getWeatherSummary(for locations: [CLLocation]) {
        task?.cancel()

        task = Task {
            let summaries = try? await locations
                .asyncCompactMap { [weak self] location -> DeviceWeatherSummary? in
                    guard
                        let self = self,
                        let locationName = try? await self.capabilities.locationName(for: location),
                        let weather = try? await self.capabilities.weather(for: location)
                    else {
                        return nil
                    }

                    return DeviceWeatherSummary(
                        locationName: locationName,
                        temperature: weather.currentTemperature.formatted(
                            .measurement(width: .abbreviated, usage: .asProvided)
                        ),
                        symbolName: weather.symbolName
                    )
                }

            await MainActor.run {
                self.favorites = summaries ?? []
            }
        }
    }
}
