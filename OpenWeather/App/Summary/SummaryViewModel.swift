//
//  OpenWeather template generated by OpenBytes on 16/03/2023.
//
// Created by Ahmed Shendy.
//  SummaryViewModel.swift
//

import Foundation
import CoreLocation

final class SummaryViewModel: ObservableObject, ErrorHandling {
    private var weatherProviding: WeatherProviding
    private var locationProviding: LocationProviding
    private var task: Task<Void, Never>?

    var errorHandler: ErrorHandler

    @Published var summaries: [DeviceWeatherSummary] = []

    init(
        weatherProviding: WeatherProviding,
        locationProviding: LocationProviding,
        errorHandler: ErrorHandler = ErrorHandler(
            plugins: [
                ToastErrorPlugin()
            ]
        )
    ) {
        self.weatherProviding = weatherProviding
        self.locationProviding = locationProviding
        self.errorHandler = errorHandler
    }

    func getWeatherSummary(for locations: [CLLocation]) {
        task?.cancel()

        task = Task {
            let summaries = try? await locations
                .asyncCompactMap { [weak self] location -> DeviceWeatherSummary? in
                    guard
                        let self = self,
                        let locationName = try? await self.locationProviding.locationName(for: location),
                        let weather = try? await self.weatherProviding.currentWeather(for: location)
                    else {
                        return nil
                    }

                    return DeviceWeatherSummary(
                        locationName: locationName,
                        temperature: weather.currentTemperature.formatted(
                            .measurement(width: .abbreviated, usage: .asProvided)
                        ),
                        symbolName: weather.symbolName
                    )
                }

            await MainActor.run {
                self.summaries = summaries ?? []
            }
        }
    }
}

//TODO: Move this to extensions file
extension Sequence {
    func asyncCompactMap<T>(
        _ transform: (Element) async throws -> T?
    ) async rethrows -> [T] {
        var values: [T] = []

        for element in self {
            if let value = try? await transform(element) {
                values.append(value)
            }
        }

        return values
    }
}
