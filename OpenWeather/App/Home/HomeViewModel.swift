//
//  OpenWeather template generated by OpenBytes on 15/03/2023.
//
// Created by Ahmed Shendy.
//  HomeViewModel.swift
//

import Foundation
import CoreLocation

final class HomeViewModel: ObservableObject, ErrorHandling {
    private var weatherProviding: WeatherProviding
    private var locationProviding: LocationProviding
    private var task: Task<Void, Never>?

    var errorHandler: ErrorHandler

    @Published var locationName: String = ""
    @Published var temperature: String = ""
    @Published var symbolName: String = ""
    @Published var realFeel: String = ""
    @Published var uv: String = ""
    @Published var windSpeed: String = ""

    init(
        weatherProviding: WeatherProviding,
        locationProviding: LocationProviding,
        errorHandler: ErrorHandler = ErrorHandler(
            plugins: [
                ToastErrorPlugin()
            ]
        )
    ) {
        self.weatherProviding = weatherProviding
        self.locationProviding = locationProviding
        self.errorHandler = errorHandler
    }

    func getWeather(for location: CLLocation) {
        task?.cancel()

        task = Task {
            if let locatioName = try? await locationProviding.locationName(for: location) {
                await MainActor.run {
                    locationName = locatioName
                }
            }

            if let weather = try? await weatherProviding.currentWeather(for: location) {
                await MainActor.run {
                    temperature = weather.currentTemperature.formatted(
                        .measurement(width: .abbreviated, usage: .asProvided)
                    )
                    symbolName = weather.symbolName
                    realFeel = weather.realFeel.formatted(
                        .measurement(width: .abbreviated, usage: .asProvided)
                    )
                    uv = "\(weather.uv)"
                    windSpeed = weather.wind.speed.formatted(
                        .measurement(width: .abbreviated, usage: .asProvided)
                    )
                }
            }
        }
    }
}
