//
//  OpenWeather template generated by OpenBytes on 4/25/23.
//
// Created by Leif.
//  OpenWeatherMapWeatherProvider.swift
//

import CoreLocation
import Foundation
import Network

struct OpenWeatherMapWeatherProvider: WeatherProviding {
    enum WeatherError: Error {
        case invalidURL
        case noData
    }

    let url = URL(string: "https://api.openweathermap.org/data/2.5/weather")

    func weather(for location: CLLocation) async throws -> DeviceWeather {
        guard
            let weatherURL = url?.appending(
                queryItems: [
                    URLQueryItem(name: "lat", value: "\(location.coordinate.latitude)"),
                    URLQueryItem(name: "lon", value: "\(location.coordinate.longitude)"),
                    URLQueryItem(
                        name: "appid",
                        value: ProcessInfo.processInfo.environment["OpenWeatherMapAPIKey"]
                    ),
                    URLQueryItem(
                        name: "units",
                        value: Locale.autoupdatingCurrent.measurementSystem == .metric ? "metric" : "imperial"
                    ),
                ]
            )
        else {
            throw WeatherError.invalidURL
        }

        let dataResponse = try await Network.get(url: weatherURL)

        guard let weatherData = dataResponse.data else {
            throw WeatherError.noData
        }

        let weather = try JSONDecoder().decode(OpenWeatherMapWeather.self, from: weatherData)

        return WeatherAdapter.device(from: weather)
    }
}

