//
//  OpenWeather template generated by OpenBytes on 15/03/2023.
//
// Created by Ahmed Shendy.
//  WeatherAdapter.swift
//

import Foundation
import WeatherKit

enum WeatherAdapter {
    static func device(from: Weather) -> DeviceWeather {
        let currentWeather = from.currentWeather
        let wind = from.currentWeather.wind
        let hourlyForecast = from.hourlyForecast

        return DeviceWeather(
            currentTemperature: currentWeather.temperature,
            realFeel: currentWeather.apparentTemperature,
            uv: currentWeather.uvIndex.value,
            symbolName: currentWeather.symbolName,
            wind: DeviceWind(
                direction: wind.direction,
                speed: wind.speed,
                gust: wind.gust
            ),
            hourlyForecast: hourlyForecast.map {
                DeviceHourlyForecast(
                    date: $0.date,
                    temperature: $0.temperature,
                    symbolName: $0.symbolName
                )
            }
        )
    }

    static func device(from: OpenWeatherMapWeather) -> DeviceWeather {
        let isMetric = Locale.autoupdatingCurrent.measurementSystem == .metric

        return DeviceWeather(
            currentTemperature: Measurement(
                value: from.main.temp,
                unit: isMetric ? .celsius : .fahrenheit
            ),
            realFeel: Measurement(
                value: from.main.feels_like,
                unit: isMetric ? .celsius : .fahrenheit
            ),
            uv: -1,
            symbolName: "cloud",
            wind: DeviceWind(
                direction: Measurement(value: from.wind.deg, unit: .degrees),
                speed: Measurement(
                    value: from.wind.speed,
                    unit: isMetric ? .metersPerSecond : .milesPerHour
                ),
                gust: Measurement(
                    value: from.wind.gust ?? 0,
                    unit: isMetric ? .metersPerSecond : .milesPerHour
                )
            ),
            hourlyForecast: []
        )
    }
}
